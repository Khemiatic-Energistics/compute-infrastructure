## Validate Helm install

- name: Check if Helm command is installed locally
  ansible.builtin.shell: hash helm
  delegate_to: 127.0.0.1
  run_once: true
  changed_when: false
  args:
    executable: "/bin/bash"

## Cert-Manager Deployment
- name: Ensure Cert-Manager namespace exists
  community.kubernetes.k8s:
    state: present
    kind: Namespace
    name: kube-system

- name: Install Cert-Manager
  community.kubernetes.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    namespace: kube-system

## MetalLB Deployment
- name: Ensure MetalLB namespace exists
  community.kubernetes.k8s:
    state: present
    kind: Namespace
    name: metallb-system

- name: Install MetalLB with configuration via Helm
  community.kubernetes.helm:
    name: metallb
    chart_ref: metallb/metallb
    namespace: metallb-system
    values:
      extraManifests:
        - apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: first-pool
            namespace: metallb-system
          spec:
            addresses:
              - 192.168.1.200-192.168.1.220
        - apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-advertisement
            namespace: metallb-system
          spec:
            ipAddressPools:
              - first-pool


## Longhorn Deployment
- name: Ensure Longhorn namespace exists
  community.kubernetes.k8s:
    state: present
    kind: Namespace
    name: longhorn-system

- name: Install Longhorn
  community.kubernetes.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    namespace: longhorn-system

- name: Ensure Longhorn storage directories exist
  file:
    path: /mnt/longhorn-storage
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create StorageClass for Longhorn
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: longhorn-storage
      provisioner: driver.longhorn.io
      parameters:
        numberOfReplicas: "3"
        staleReplicaTimeout: "30"
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      volumeBindingMode: Immediate

## S3-CSI Deployment

# Load the Vault variables
- name: Include R2 credentials
  include_vars: r2-credentials.yml

# Create Cloudflare R2 credentials secret
- name: Create Cloudflare R2 credentials secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: r2-credentials
        namespace: kube-system
      type: Opaque
      stringData:
        accessKey: "{{ r2_access_key }}"
        secretKey: "{{ r2_secret_key }}"

- name: Add JuiceFS CSI Driver Helm repository
  ansible.builtin.command:
    cmd: "helm repo add juicefs https://juicedata.github.io/juicefs-csi-driver/"
  register: helm_repo_add
  changed_when: "'repository' in helm_repo_add.stdout or 'successfully' in helm_repo_add.stdout"

- name: Install JuiceFS CSI Driver via Helm
  community.kubernetes.helm:
    name: juicefs-csi-driver
    chart_ref: juicefs/juicefs-csi-driver
    namespace: kube-system
    release_name: juicefs-csi-driver

- name: Create StorageClass for Cloudflare R2
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: cloudflare-r2-jupyter
      provisioner: s3.csi.aws.com  # Ensure you're using the correct S3-CSI driver
      parameters:
        bucket: "jupyternotebooks"
        endpoint: "https://d39a438e19ba2840e1ddb32ad09181ed.r2.cloudflarestorage.com"
        sigVersion: "s3v4"  # S3 signature version 4 (used by Cloudflare R2)
      secretName: "r2-credentials"
      secretNamespace: "kube-system"
      reclaimPolicy: Retain
      allowVolumeExpansion: true
